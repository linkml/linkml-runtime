# This action is split up into two phases because
# - We want to test linkml-runtime against linkml's lockfile - so we can't pip install --force-reinstall the local version
# - We want to also take into account any deps changes linkml-runtime might have - so we can't pip install --no-deps
# - We need to actually be able to install linkml-runtime, and since dynamic versioning doesn't work and can't be forced with
#   env vars from another project...
# We build a wheel with an artificially high version first, and then share that to the upstream tests
# The linkml-runtime wheel should be the same across OS and python versions (and is actually an additional test of our packaging)

name: Test with upstream linkml
on:
  pull_request_review:
    types: [ submitted ]
  workflow_dispatch:

jobs:
  build_wheel:
    if: github.event_name == 'workflow_dispatch' || github.event.review.state == 'APPROVED'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      linkml-runtime-wheel: ${{ steps.wheel-upload.outputs.artifact-id }}

    steps:
      - name: checkout linkml-runtime
        uses: actions/checkout@v4
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: get linkml-runtime short hash
        run: |
          LINKML_RUNTIME_COMMIT=$(git rev-parse --short HEAD)
          echo "LINKML_RUNTIME_COMMIT=$LINKML_RUNTIME_COMMIT" >> "$GITHUB_ENV"
      - name: build linkml-runtime wheel
        run: |
          POETRY_DYNAMIC_VERSIONING_BYPASS="1.99.0+${{ env.LINKML_RUNTIME_COMMIT }}" poetry build
      - name: upload dist directory
        uses: actions/upload-artifact@v4
        id: wheel-upload
        with:
          name: linkml-runtime-wheel
          path: dist/
          if-no-files-found: error
          overwrite: true
          retention-days: 5

  test_upstream:
    needs: build_wheel
    if: github.event_name == 'workflow_dispatch' || github.event.review.state == 'APPROVED'
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]
        pydantic-version: [ "1", "2" ]
        exclude:
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            pydantic-version: "1"
          - python-version: "3.8"
            pydantic-version: "1"
          - python-version: "3.9"
            pydantic-version: "1"
          - python-version: "3.10"
            pydantic-version: "1"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:

      - name: checkout upstream
        uses: actions/checkout@v4
        with:
          repository: linkml/linkml
          path: linkml
          ref: main
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: linkml/.venv
          key: venv-${{ matrix.python-version }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # use correct pydantic version
      - name: install pydantic
        working-directory: linkml
        run: poetry add pydantic@^${{ matrix.pydantic-version }}

      - name: remove potentially cached linkml-runtime version
        working-directory: linkml
        run: poetry run pip uninstall linkml-runtime -y

      # this should unpack into dist/
      - name: Download the built wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_wheel.outputs.linkml-runtime-wheel }}

      # amazingly, poetry does find the wheel correctly
      - name: add linkml-runtime wheel to linkml's venv
        working-directory: linkml
        run: poetry add ./dist/*

      # with the modifications to the lockfile, we can install the rest of the deps
      - name: install linkml
        working-directory: linkml
        run: poetry install --no-interaction --no-root -E tests

      - name: print linkml-runtime version
        working-directory: linkml
        run: poetry run python -c 'import linkml_runtime; from importlib.metadata import version; print(linkml_runtime.__file__); print(version("linkml_runtime"))'

      - name: run tests
        working-directory: linkml
        run: poetry run python -m pytest --with-slow



